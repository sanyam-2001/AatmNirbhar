#include <bits/stdc++.h>
using namespace std;

struct node{
    node *left;
    node *right;
    int data;

};



node *newnode(int val){
    node *box=(node*)malloc(sizeof(node));
    box->data=val;
    box->left=NULL;
    box->right=NULL;
    return box;
}

 void sortedInsert(vector<node*> &arr, node* &val){
    if(arr.size()==0){
        arr.push_back(val);
        return;
    }
    int index=-1;
    for(unsigned int i=0;i<arr.size();i++){
        if(val->data<=arr[i]->data){
            index=i;
            break;
        }

    }
    if(index==-1){
        arr.push_back(val);
        return;
    }

    arr.insert(arr.begin()+index, val);

}

void preorder(node *root){
    if(root){
        cout<<root->data<<" ";
        preorder(root->left);
        preorder(root->right);
    }
}




int main() {
   int test;
   cin>>test;
   while(test--){
        string alphabets;
        cin>>alphabets;
        vector<int> frequency;
        for(unsigned int i=0;i<alphabets.length();i++){
            int temp;
            cin>>temp;
            frequency.push_back(temp);
        }
        sort(frequency.begin(), frequency.end());
        vector<node*> arr;
        for(unsigned int i=0;i<frequency.size();i++){
            arr.push_back(newnode(frequency[i]));
        }

        while(arr.size()!=1){
            node *next = newnode(arr[0]->data+arr[1]->data);
            next->left=arr[0];
            next->right=arr[1];
            arr.erase(arr.begin());
            arr.erase(arr.begin());


            sortedInsert(arr, next);


        }
        node *root = arr[0];
        preorder(root);


   }

	return 0;
}
